{"version":3,"sources":["StudentsApi.js","main.js"],"names":["StudentsApi","_classCallCheck","this","_createClass","key","value","method","urlId","body","fetch","concat","URL","JSON","stringify","undefined","headers","Content-type","then","response","ok","json","Error","cause","request","error","student","id","change","_defineProperty","$containerStudentList","$","$form","$table","$name","Array","fill","preventDefault","e","getStudent","createStudent","clearForm","trEl","studentList","dataset","remove","console","log","onMarkClick","filter","_this","trOld","closest","marks","from","querySelectorAll","map","item","find","showError","addStudent","newStudent","getTemplate","append","renderStudentsList","name","val","getStudentsList","getList","list","studentsList","html","message","_ref","alert","mark","join","reset","_ref2","on","onFormSubmit","onDeleteBtnClick"],"mappings":"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","file":"app.js","sourcesContent":["class StudentsApi {\n    static URL = 'https://636937fa28cd16bba7184e47.mockapi.io/api/todo/students-list'\n\n\n    static request(method, urlId, body) {\n        return fetch(`${this.URL}${urlId ? `/${urlId}` : ''}`, {\n            method: method,\n            body: body ? JSON.stringify(body) : undefined,\n            headers: {\n                'Content-type': 'application/json',\n            }\n        })\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                throw new Error('Canot execute request method', { cause: response });\n            })\n    }\n\n    static getList() {\n        return this.request('GET').catch((error) => {\n            throw new Error('Can not retrieve students list from server',);\n        })\n    }\n\n    static create(student) {\n        return this.request('POST', '', student).catch((error) => {\n            throw new Error('Can not create student on server');\n        })\n    }\n\n    static update(id, change) {\n        return this.request('PUT', id, change).catch((error) => {\n            throw new Error('Can not update student on server');\n        })\n    }\n\n    static delete(id) {\n        return this.request('DELETE', id).catch((error) => {\n            throw new Error('Can not delete student on server');\n        })\n    }\n}","const $containerStudentList = $('.container')\nconst $form = $('form')\nconst $table = $('table')\nconst $name = $('#name')\nlet studentList = []\nconst MARKS = new Array(10).fill('0')\n\ngetStudentsList()\n\n$form.on('submit', onFormSubmit)\n$containerStudentList.on('click', '.deleteBtn', onDeleteBtnClick)\n$containerStudentList.on('click', '.mark', onMarkClick)\n\nfunction onFormSubmit(e) {\n    e.preventDefault()\n\n    const student = getStudent()\n\n    createStudent(student)\n\n    clearForm()\n}\n\nfunction onDeleteBtnClick() {\n    const trEl = this.closest('.item')\n    const id = trEl.dataset.id\n\n    StudentsApi.delete(id)\n        .then(() => {\n            console.log(studentList);\n            studentList = studentList.filter(student => student.id !== id)\n            console.log(studentList);\n        })\n\n    trEl.remove()\n}\n\nfunction onMarkClick() {\n    $(this).focusout(() => {\n        const trEl = this.closest('.item')\n        const id = trEl.dataset.id\n        const marks = Array.from(trEl.querySelectorAll('.mark')).map(item => item.value)\n\n        const trOld = studentList.find(student => student.id === id)\n        trOld.marks = marks\n        StudentsApi.update(id, trOld).catch(showError)\n    })\n}\n\nfunction createStudent(student) {\n    StudentsApi.create(student)\n        .then(newStudent => {\n            studentList.push(newStudent)\n            renderStudentsList(studentList)\n        })\n        .catch(showError)\n    addStudent(student)\n}\n\nfunction addStudent(student) {\n    $containerStudentList.append(getTemplate(student))\n}\n\nfunction getStudent() {\n    return {\n        name: $name.val(),\n        marks: MARKS\n    }\n}\n\nfunction getStudentsList() {\n    StudentsApi.getList()\n        .then(list => studentList = list)\n        .then(renderStudentsList)\n        .catch(showError)\n}\n\nfunction renderStudentsList(studentsList) {\n    $containerStudentList.html(studentsList.map(getTemplate))\n}\n\nfunction getTemplate({ id, marks, name }) {\n    return `\n    <tr class=\"item\" data-id=\"${id}\">\n        <td>${name}</td>\n        <td class=\"itemMarks\">${marks.map(mark => `<input class=\"mark\" value=\"${mark}\">`).join('')}</td>\n        <td><button class=\"deleteBtn\">Delete</button></td>\n    </tr>\n    `\n}\n\nfunction clearForm() {\n    $form[0].reset()\n}\n\nfunction showError({ message }) {\n    alert(message)\n}"]}